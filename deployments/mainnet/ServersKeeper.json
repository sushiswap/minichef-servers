{
  "address": "0xd20Ae5aA1FD1e0195cBbD0bD0BD6c8Ef811a0a59",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_masterchef",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minTimePeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "checkData",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getServers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastHarvestAndBridge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minTimePeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinTimePeriod",
          "type": "uint256"
        }
      ],
      "name": "setMinTimePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_servers",
          "type": "address[]"
        }
      ],
      "name": "setServers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdce9d63590cd58f61df9e936806ab8a73100fd138745395d47d6069801bfbf18",
  "receipt": {
    "to": null,
    "from": "0x26A2905c22a7C2884d5F3929e698985177d34cdf",
    "contractAddress": "0xd20Ae5aA1FD1e0195cBbD0bD0BD6c8Ef811a0a59",
    "transactionIndex": 71,
    "gasUsed": "857923",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000a00000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000200000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000400000000000000000000000000000000",
    "blockHash": "0x9888cc98e48c6686fe11bb3686fd6ffc9df0bac7bfecb260204a0ca04b44b472",
    "transactionHash": "0xdce9d63590cd58f61df9e936806ab8a73100fd138745395d47d6069801bfbf18",
    "logs": [
      {
        "transactionIndex": 71,
        "blockNumber": 15691531,
        "transactionHash": "0xdce9d63590cd58f61df9e936806ab8a73100fd138745395d47d6069801bfbf18",
        "address": "0xd20Ae5aA1FD1e0195cBbD0bD0BD6c8Ef811a0a59",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000026a2905c22a7c2884d5f3929e698985177d34cdf"
        ],
        "data": "0x",
        "logIndex": 182,
        "blockHash": "0x9888cc98e48c6686fe11bb3686fd6ffc9df0bac7bfecb260204a0ca04b44b472"
      }
    ],
    "blockNumber": 15691531,
    "cumulativeGasUsed": "7385683",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd",
    "604800"
  ],
  "solcInputHash": "e29f487e14c47e94768499f93fc3f61d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterchef\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minTimePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getServers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastHarvestAndBridge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTimePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinTimePeriod\",\"type\":\"uint256\"}],\"name\":\"setMinTimePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_servers\",\"type\":\"address[]\"}],\"name\":\"setServers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"View function checked by the keeper on every block\"},\"getServers()\":{\"notice\":\"Servers array getter\"},\"performUpkeep(bytes)\":{\"notice\":\"Function executed by the keeper if checkUpKeep returns true\"},\"setServers(address[])\":{\"notice\":\"Set the array of servers to be checked by the keeper\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ServersKeeper.sol\":\"ServersKeeper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BaseServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMasterChefV1 {\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n}\\n\\ninterface IBridgeAdapter {\\n    function bridge() external;\\n}\\n\\nabstract contract BaseServer is Ownable {\\n    IMasterChefV1 public constant masterchefV1 =\\n        IMasterChefV1(0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd);\\n    IERC20 public constant sushi =\\n        IERC20(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2);\\n\\n    uint256 public immutable pid;\\n\\n    address public immutable minichef;\\n\\n    address public bridgeAdapter;\\n\\n    event Harvested(uint256 indexed pid);\\n    event Withdrawn(uint256 indexed pid, uint256 indexed amount);\\n    event Deposited(uint256 indexed pid, uint256 indexed amount);\\n    event WithdrawnSushi(uint256 indexed pid, uint256 indexed amount);\\n    event WithdrawnDummyToken(uint256 indexed pid);\\n    event BridgeUpdated(address indexed newBridgeAdapter);\\n\\n    constructor(uint256 _pid, address _minichef) {\\n        pid = _pid;\\n        minichef = _minichef;\\n        bridgeAdapter = address(this);\\n    }\\n\\n    function harvestAndBridge() public {\\n        masterchefV1.withdraw(pid, 0);\\n        bridge();\\n        emit Harvested(pid);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        masterchefV1.withdraw(pid, 1);\\n        emit Withdrawn(pid, 1);\\n    }\\n\\n    function deposit(address token) public onlyOwner {\\n        IERC20(token).approve(address(masterchefV1), 1);\\n        masterchefV1.deposit(pid, 1);\\n        emit Deposited(pid, 1);\\n    }\\n\\n    function withdrawSushiToken(address recipient) public onlyOwner {\\n        uint256 sushiBalance = sushi.balanceOf(address(this));\\n        sushi.transfer(recipient, sushiBalance);\\n        emit WithdrawnSushi(pid, sushiBalance);\\n    }\\n\\n    function withdrawDummyToken(address token, address recipient)\\n        public\\n        onlyOwner\\n    {\\n        IERC20(token).transfer(recipient, 1);\\n        emit WithdrawnDummyToken(pid);\\n    }\\n\\n    function updateBridgeAdapter(address newBridgeAdapter) public onlyOwner {\\n        require(newBridgeAdapter != address(0), \\\"zero address\\\");\\n        bridgeAdapter = newBridgeAdapter;\\n        emit BridgeUpdated(newBridgeAdapter);\\n    }\\n\\n    function bridge() public {\\n        if (bridgeAdapter == address(this)) {\\n            _bridge();\\n        } else {\\n            uint256 sushiBalance = sushi.balanceOf(address(this));\\n            sushi.transfer(bridgeAdapter, sushiBalance);\\n            IBridgeAdapter(bridgeAdapter).bridge();\\n        }\\n    }\\n\\n    function _bridge() internal virtual;\\n}\\n\",\"keccak256\":\"0x0ec4b3fa1e487d0beb4f3f7f2c2af620b6956b4d6e085ceef959e9ed1650e45f\",\"license\":\"MIT\"},\"contracts/ServersKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {BaseServer} from \\\"./BaseServer.sol\\\";\\n\\ninterface IMasterChef {\\n    function pendingSushi(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\\ninterface KeeperCompatibleInterface {\\n    function checkUpkeep(bytes calldata checkData)\\n        external\\n        view\\n        returns (bool upkeepNeeded, bytes memory performData);\\n\\n    function performUpkeep(bytes calldata performData) external;\\n}\\n\\ncontract ServersKeeper is Ownable, KeeperCompatibleInterface {\\n    IMasterChef internal immutable masterchef;\\n\\n    uint256 public minTimePeriod;\\n\\n    address[] internal servers;\\n    mapping(address => uint256) public lastHarvestAndBridge;\\n\\n    constructor(address _masterchef, uint256 _minTimePeriod) {\\n        masterchef = IMasterChef(_masterchef);\\n        minTimePeriod = _minTimePeriod;\\n    }\\n\\n    ///@notice Set the array of servers to be checked by the keeper\\n    function setServers(address[] calldata _servers) external onlyOwner {\\n        for (uint256 i = 0; i < _servers.length; ) {\\n            lastHarvestAndBridge[_servers[i]] = block.timestamp;\\n\\n            unchecked {\\n                i += 1;\\n            }\\n        }\\n        servers = _servers;\\n    }\\n\\n    function setMinTimePeriod(uint256 newMinTimePeriod) external onlyOwner {\\n        minTimePeriod = newMinTimePeriod;\\n    }\\n\\n    ///@notice View function checked by the keeper on every block\\n    function checkUpkeep(bytes calldata checkData)\\n        external\\n        view\\n        returns (bool upkeepNeeded, bytes memory performData)\\n    {\\n        uint256 length = servers.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            address server = servers[i];\\n            if (\\n                lastHarvestAndBridge[server] + minTimePeriod <\\n                block.timestamp &&\\n                masterchef.pendingSushi(BaseServer(server).pid(), server) > 0\\n            ) {\\n                return (true, abi.encode(server));\\n            }\\n        }\\n    }\\n\\n    ///@notice Function executed by the keeper if checkUpKeep returns true\\n    function performUpkeep(bytes calldata performData) external {\\n        address server = abi.decode(performData, (address));\\n        if (\\n            lastHarvestAndBridge[server] + minTimePeriod < block.timestamp &&\\n            masterchef.pendingSushi(BaseServer(server).pid(), server) > 0\\n        ) {\\n            BaseServer(server).harvestAndBridge();\\n            lastHarvestAndBridge[server] = block.timestamp;\\n        }\\n    }\\n\\n    ///@notice Servers array getter\\n    function getServers() external view returns (address[] memory) {\\n        return servers;\\n    }\\n}\\n\",\"keccak256\":\"0x71568a95524972df0c35869151fcb8ebacc51fe113ab1a47c4ac802b97c7c160\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610eb6380380610eb683398101604081905261002f9161009e565b6100383361004e565b6001600160a01b039091166080526001556100d8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080604083850312156100b157600080fd5b82516001600160a01b03811681146100c857600080fd5b6020939093015192949293505050565b608051610dbc6100fa6000396000818161038d01526105d50152610dbc6000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c806375c1c7e7116100765780638da5cb5b1161005b5780638da5cb5b1461015c578063f2fde38b14610184578063f3755cb11461019757600080fd5b806375c1c7e7146101305780637b8d81441461014557600080fd5b80634585e33b116100a75780634585e33b146100eb5780636e04ff0d146100fe578063715018a61461012857600080fd5b8063054feba0146100c357806305c3c5c6146100d8575b600080fd5b6100d66100d1366004610ab3565b6101b7565b005b6100d66100e6366004610b28565b6102b5565b6100d66100f9366004610b41565b61033b565b61011161010c366004610b41565b61055c565b60405161011f929190610ba1565b60405180910390f35b6100d6610775565b610138610802565b60405161011f9190610c1e565b61014e60015481565b60405190815260200161011f565b60005460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161011f565b6100d6610192366004610c9a565b610871565b61014e6101a5366004610c9a565b60036020526000908152604090205481565b60005473ffffffffffffffffffffffffffffffffffffffff16331461023d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b60005b818110156102a357426003600085858581811061025f5761025f610cbe565b90506020020160208101906102749190610c9a565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002055600101610240565b506102b060028383610a16565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610336576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610234565b600155565b600061034982840184610c9a565b60015473ffffffffffffffffffffffffffffffffffffffff821660009081526003602052604090205491925042916103819190610d1c565b1080156104cc575060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663195426ec8373ffffffffffffffffffffffffffffffffffffffff1663f10684546040518163ffffffff1660e01b8152600401602060405180830381865afa158015610412573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104369190610d34565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b168152600481019190915273ffffffffffffffffffffffffffffffffffffffff85166024820152604401602060405180830381865afa1580156104a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ca9190610d34565b115b156102b0578073ffffffffffffffffffffffffffffffffffffffff1663d24a89d56040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561051957600080fd5b505af115801561052d573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090204290555050565b600254600090606090825b8181101561076b5760006002828154811061058457610584610cbe565b600091825260208083209091015460015473ffffffffffffffffffffffffffffffffffffffff909116808452600390925260409092205490925042916105c991610d1c565b108015610714575060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663195426ec8373ffffffffffffffffffffffffffffffffffffffff1663f10684546040518163ffffffff1660e01b8152600401602060405180830381865afa15801561065a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067e9190610d34565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b168152600481019190915273ffffffffffffffffffffffffffffffffffffffff85166024820152604401602060405180830381865afa1580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107129190610d34565b115b15610758576040805173ffffffffffffffffffffffffffffffffffffffff83166020820152600191016040516020818303038152906040529450945050505061076e565b508061076381610d4d565b915050610567565b50505b9250929050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610234565b61080060006109a1565b565b6060600280548060200260200160405190810160405280929190818152602001828054801561086757602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161083c575b5050505050905090565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610234565b73ffffffffffffffffffffffffffffffffffffffff8116610995576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610234565b61099e816109a1565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215610a8e579160200282015b82811115610a8e5781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff843516178255602090920191600190910190610a36565b50610a9a929150610a9e565b5090565b5b80821115610a9a5760008155600101610a9f565b60008060208385031215610ac657600080fd5b823567ffffffffffffffff80821115610ade57600080fd5b818501915085601f830112610af257600080fd5b813581811115610b0157600080fd5b8660208260051b8501011115610b1657600080fd5b60209290920196919550909350505050565b600060208284031215610b3a57600080fd5b5035919050565b60008060208385031215610b5457600080fd5b823567ffffffffffffffff80821115610b6c57600080fd5b818501915085601f830112610b8057600080fd5b813581811115610b8f57600080fd5b866020828501011115610b1657600080fd5b821515815260006020604081840152835180604085015260005b81811015610bd757858101830151858201606001528201610bbb565b81811115610be9576000606083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01692909201606001949350505050565b6020808252825182820181905260009190848201906040850190845b81811015610c6c57835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610c3a565b50909695505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461099e57600080fd5b600060208284031215610cac57600080fd5b8135610cb781610c78565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610d2f57610d2f610ced565b500190565b600060208284031215610d4657600080fd5b5051919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d7f57610d7f610ced565b506001019056fea264697066735822122053b78e893957ff99cc75b169794f285614e2e608500ecccbc92792470ff1d4e564736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c806375c1c7e7116100765780638da5cb5b1161005b5780638da5cb5b1461015c578063f2fde38b14610184578063f3755cb11461019757600080fd5b806375c1c7e7146101305780637b8d81441461014557600080fd5b80634585e33b116100a75780634585e33b146100eb5780636e04ff0d146100fe578063715018a61461012857600080fd5b8063054feba0146100c357806305c3c5c6146100d8575b600080fd5b6100d66100d1366004610ab3565b6101b7565b005b6100d66100e6366004610b28565b6102b5565b6100d66100f9366004610b41565b61033b565b61011161010c366004610b41565b61055c565b60405161011f929190610ba1565b60405180910390f35b6100d6610775565b610138610802565b60405161011f9190610c1e565b61014e60015481565b60405190815260200161011f565b60005460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161011f565b6100d6610192366004610c9a565b610871565b61014e6101a5366004610c9a565b60036020526000908152604090205481565b60005473ffffffffffffffffffffffffffffffffffffffff16331461023d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b60005b818110156102a357426003600085858581811061025f5761025f610cbe565b90506020020160208101906102749190610c9a565b73ffffffffffffffffffffffffffffffffffffffff168152602081019190915260400160002055600101610240565b506102b060028383610a16565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610336576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610234565b600155565b600061034982840184610c9a565b60015473ffffffffffffffffffffffffffffffffffffffff821660009081526003602052604090205491925042916103819190610d1c565b1080156104cc575060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663195426ec8373ffffffffffffffffffffffffffffffffffffffff1663f10684546040518163ffffffff1660e01b8152600401602060405180830381865afa158015610412573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104369190610d34565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b168152600481019190915273ffffffffffffffffffffffffffffffffffffffff85166024820152604401602060405180830381865afa1580156104a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ca9190610d34565b115b156102b0578073ffffffffffffffffffffffffffffffffffffffff1663d24a89d56040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561051957600080fd5b505af115801561052d573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090204290555050565b600254600090606090825b8181101561076b5760006002828154811061058457610584610cbe565b600091825260208083209091015460015473ffffffffffffffffffffffffffffffffffffffff909116808452600390925260409092205490925042916105c991610d1c565b108015610714575060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663195426ec8373ffffffffffffffffffffffffffffffffffffffff1663f10684546040518163ffffffff1660e01b8152600401602060405180830381865afa15801561065a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067e9190610d34565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b168152600481019190915273ffffffffffffffffffffffffffffffffffffffff85166024820152604401602060405180830381865afa1580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107129190610d34565b115b15610758576040805173ffffffffffffffffffffffffffffffffffffffff83166020820152600191016040516020818303038152906040529450945050505061076e565b508061076381610d4d565b915050610567565b50505b9250929050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146107f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610234565b61080060006109a1565b565b6060600280548060200260200160405190810160405280929190818152602001828054801561086757602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161083c575b5050505050905090565b60005473ffffffffffffffffffffffffffffffffffffffff1633146108f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610234565b73ffffffffffffffffffffffffffffffffffffffff8116610995576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610234565b61099e816109a1565b50565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215610a8e579160200282015b82811115610a8e5781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff843516178255602090920191600190910190610a36565b50610a9a929150610a9e565b5090565b5b80821115610a9a5760008155600101610a9f565b60008060208385031215610ac657600080fd5b823567ffffffffffffffff80821115610ade57600080fd5b818501915085601f830112610af257600080fd5b813581811115610b0157600080fd5b8660208260051b8501011115610b1657600080fd5b60209290920196919550909350505050565b600060208284031215610b3a57600080fd5b5035919050565b60008060208385031215610b5457600080fd5b823567ffffffffffffffff80821115610b6c57600080fd5b818501915085601f830112610b8057600080fd5b813581811115610b8f57600080fd5b866020828501011115610b1657600080fd5b821515815260006020604081840152835180604085015260005b81811015610bd757858101830151858201606001528201610bbb565b81811115610be9576000606083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01692909201606001949350505050565b6020808252825182820181905260009190848201906040850190845b81811015610c6c57835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610c3a565b50909695505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461099e57600080fd5b600060208284031215610cac57600080fd5b8135610cb781610c78565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610d2f57610d2f610ced565b500190565b600060208284031215610d4657600080fd5b5051919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d7f57610d7f610ced565b506001019056fea264697066735822122053b78e893957ff99cc75b169794f285614e2e608500ecccbc92792470ff1d4e564736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkUpkeep(bytes)": {
        "notice": "View function checked by the keeper on every block"
      },
      "getServers()": {
        "notice": "Servers array getter"
      },
      "performUpkeep(bytes)": {
        "notice": "Function executed by the keeper if checkUpKeep returns true"
      },
      "setServers(address[])": {
        "notice": "Set the array of servers to be checked by the keeper"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ServersKeeper.sol:ServersKeeper",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1131,
        "contract": "contracts/ServersKeeper.sol:ServersKeeper",
        "label": "minTimePeriod",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1134,
        "contract": "contracts/ServersKeeper.sol:ServersKeeper",
        "label": "servers",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1138,
        "contract": "contracts/ServersKeeper.sol:ServersKeeper",
        "label": "lastHarvestAndBridge",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}